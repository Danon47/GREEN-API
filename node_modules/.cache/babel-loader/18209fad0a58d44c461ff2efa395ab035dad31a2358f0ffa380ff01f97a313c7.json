{"ast":null,"code":"import _objectSpread from \"E:/\\u0434\\u0430\\u043D\\u0438\\u043D \\u0441\\u0442\\u043E\\u043B/danil.DESKTOP-EN4V9AA/\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0435/\\u0413\\u0440\\u0438\\u043D-\\u0410\\u043F\\u0438/green-api-chat/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport isHostComponent from \"../isHostComponent/index.js\";\n\n/**\n * Type of the ownerState based on the type of an element it applies to.\n * This resolves to the provided OwnerState for React components and `undefined` for host components.\n * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.\n */\n\n/**\n * Appends the ownerState object to the props, merging with the existing one if necessary.\n *\n * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.\n * @param otherProps Props of the element.\n * @param ownerState\n */\nfunction appendOwnerState(elementType, otherProps, ownerState) {\n  if (elementType === undefined || isHostComponent(elementType)) {\n    return otherProps;\n  }\n  return _objectSpread(_objectSpread({}, otherProps), {}, {\n    ownerState: _objectSpread(_objectSpread({}, otherProps.ownerState), ownerState)\n  });\n}\nexport default appendOwnerState;","map":{"version":3,"names":["isHostComponent","appendOwnerState","elementType","otherProps","ownerState","undefined","_objectSpread"],"sources":["E:/данин стол/danil.DESKTOP-EN4V9AA/Тестовые/Грин-Апи/green-api-chat/node_modules/@mui/utils/esm/appendOwnerState/appendOwnerState.js"],"sourcesContent":["import isHostComponent from \"../isHostComponent/index.js\";\n\n/**\n * Type of the ownerState based on the type of an element it applies to.\n * This resolves to the provided OwnerState for React components and `undefined` for host components.\n * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.\n */\n\n/**\n * Appends the ownerState object to the props, merging with the existing one if necessary.\n *\n * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.\n * @param otherProps Props of the element.\n * @param ownerState\n */\nfunction appendOwnerState(elementType, otherProps, ownerState) {\n  if (elementType === undefined || isHostComponent(elementType)) {\n    return otherProps;\n  }\n  return {\n    ...otherProps,\n    ownerState: {\n      ...otherProps.ownerState,\n      ...ownerState\n    }\n  };\n}\nexport default appendOwnerState;"],"mappings":";AAAA,OAAOA,eAAe,MAAM,6BAA6B;;AAEzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAACC,WAAW,EAAEC,UAAU,EAAEC,UAAU,EAAE;EAC7D,IAAIF,WAAW,KAAKG,SAAS,IAAIL,eAAe,CAACE,WAAW,CAAC,EAAE;IAC7D,OAAOC,UAAU;EACnB;EACA,OAAAG,aAAA,CAAAA,aAAA,KACKH,UAAU;IACbC,UAAU,EAAAE,aAAA,CAAAA,aAAA,KACLH,UAAU,CAACC,UAAU,GACrBA,UAAU;EACd;AAEL;AACA,eAAeH,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
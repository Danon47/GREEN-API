{"ast":null,"code":"import _objectSpread from \"E:/\\u0434\\u0430\\u043D\\u0438\\u043D \\u0441\\u0442\\u043E\\u043B/danil.DESKTOP-EN4V9AA/\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0435/\\u0413\\u0440\\u0438\\u043D-\\u0410\\u043F\\u0438/green-api-chat/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport * as React from 'react';\nimport { extendSxProp } from '@mui/system/styleFunctionSx';\nimport useTheme from \"../styles/useTheme.js\";\nimport GlobalStyles from \"../GlobalStyles/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport { css, keyframes } from '@mui/system';\nexport { default as styled } from \"../styles/styled.js\";\nexport function globalCss(styles) {\n  return function GlobalStylesWrapper(props) {\n    return (/*#__PURE__*/\n      // Pigment CSS `globalCss` support callback with theme inside an object but `GlobalStyles` support theme as a callback value.\n      _jsx(GlobalStyles, {\n        styles: typeof styles === 'function' ? theme => styles(_objectSpread({\n          theme\n        }, props)) : styles\n      })\n    );\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function internal_createExtendSxProp() {\n  return extendSxProp;\n}\nexport { useTheme };","map":{"version":3,"names":["React","extendSxProp","useTheme","GlobalStyles","jsx","_jsx","css","keyframes","default","styled","globalCss","styles","GlobalStylesWrapper","props","theme","_objectSpread","internal_createExtendSxProp"],"sources":["E:/данин стол/danil.DESKTOP-EN4V9AA/Тестовые/Грин-Апи/green-api-chat/node_modules/@mui/material/zero-styled/index.js"],"sourcesContent":["import * as React from 'react';\nimport { extendSxProp } from '@mui/system/styleFunctionSx';\nimport useTheme from \"../styles/useTheme.js\";\nimport GlobalStyles from \"../GlobalStyles/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport { css, keyframes } from '@mui/system';\nexport { default as styled } from \"../styles/styled.js\";\nexport function globalCss(styles) {\n  return function GlobalStylesWrapper(props) {\n    return (\n      /*#__PURE__*/\n      // Pigment CSS `globalCss` support callback with theme inside an object but `GlobalStyles` support theme as a callback value.\n      _jsx(GlobalStyles, {\n        styles: typeof styles === 'function' ? theme => styles({\n          theme,\n          ...props\n        }) : styles\n      })\n    );\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function internal_createExtendSxProp() {\n  return extendSxProp;\n}\nexport { useTheme };"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,YAAY,MAAM,0BAA0B;AACnD,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,GAAG,EAAEC,SAAS,QAAQ,aAAa;AAC5C,SAASC,OAAO,IAAIC,MAAM,QAAQ,qBAAqB;AACvD,OAAO,SAASC,SAASA,CAACC,MAAM,EAAE;EAChC,OAAO,SAASC,mBAAmBA,CAACC,KAAK,EAAE;IACzC,QACE;MACA;MACAR,IAAI,CAACF,YAAY,EAAE;QACjBQ,MAAM,EAAE,OAAOA,MAAM,KAAK,UAAU,GAAGG,KAAK,IAAIH,MAAM,CAAAI,aAAA;UACpDD;QAAK,GACFD,KAAK,CACT,CAAC,GAAGF;MACP,CAAC;IAAC;EAEN,CAAC;AACH;;AAEA;AACA,OAAO,SAASK,2BAA2BA,CAAA,EAAG;EAC5C,OAAOf,YAAY;AACrB;AACA,SAASC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
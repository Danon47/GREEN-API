{"ast":null,"code":"var _jsxFileName = \"E:\\\\\\u0434\\u0430\\u043D\\u0438\\u043D \\u0441\\u0442\\u043E\\u043B\\\\danil.DESKTOP-EN4V9AA\\\\\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0435\\\\\\u0413\\u0440\\u0438\\u043D-\\u0410\\u043F\\u0438\\\\green-api-chat\\\\src\\\\components\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, List, Container, Typography } from '@mui/material';\nimport { sendMessage, receiveMessages } from '../api/greenApi';\nimport Message from './Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [newMessage, setNewMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const phoneNumber = localStorage.getItem('phoneNumber');\n\n  // Получаем сообщения каждые 5 секунд\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const data = await receiveMessages();\n      if (data) {\n        var _data$body, _data$body$messageDat, _data$body$messageDat2;\n        const message = (_data$body = data.body) === null || _data$body === void 0 ? void 0 : (_data$body$messageDat = _data$body.messageData) === null || _data$body$messageDat === void 0 ? void 0 : (_data$body$messageDat2 = _data$body$messageDat.textMessageData) === null || _data$body$messageDat2 === void 0 ? void 0 : _data$body$messageDat2.textMessage;\n        if (message) {\n          setMessages(prev => [...prev, {\n            text: message,\n            isMy: false\n          }]);\n        }\n      }\n    };\n    const interval = setInterval(fetchMessages, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Отправка сообщения\n  const handleSend = async () => {\n    if (!newMessage) {\n      alert('Введите сообщение!');\n      return;\n    }\n    try {\n      await sendMessage(phoneNumber, newMessage);\n      setMessages(prev => [...prev, {\n        text: newMessage,\n        isMy: true\n      }]);\n      setNewMessage('');\n    } catch (error) {\n      console.error('Ошибка отправки:', error);\n      alert('Не удалось отправить сообщение. Проверьте данные и попробуйте снова.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      children: [\"\\u0427\\u0430\\u0442 \\u0441 \", phoneNumber]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: msg.text,\n        isMy: msg.isMy\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"\\u0421\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        fullWidth: true,\n        margin: \"normal\",\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSend,\n        variant: \"contained\",\n        color: \"primary\",\n        fullWidth: true,\n        children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"JlHmxsX8ITaLqaPltxhcbHivhFs=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","TextField","Button","List","Container","Typography","sendMessage","receiveMessages","Message","jsxDEV","_jsxDEV","Chat","_s","newMessage","setNewMessage","messages","setMessages","phoneNumber","localStorage","getItem","fetchMessages","data","_data$body","_data$body$messageDat","_data$body$messageDat2","message","body","messageData","textMessageData","textMessage","prev","text","isMy","interval","setInterval","clearInterval","handleSend","alert","error","console","maxWidth","children","variant","align","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","label","value","onChange","e","target","fullWidth","margin","placeholder","onClick","color","_c","$RefreshReg$"],"sources":["E:/данин стол/danil.DESKTOP-EN4V9AA/Тестовые/Грин-Апи/green-api-chat/src/components/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { TextField, Button, List, Container, Typography } from '@mui/material';\r\nimport { sendMessage, receiveMessages } from '../api/greenApi';\r\nimport Message from './Message';\r\n\r\nconst Chat = () => {\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const phoneNumber = localStorage.getItem('phoneNumber');\r\n\r\n  // Получаем сообщения каждые 5 секунд\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      const data = await receiveMessages();\r\n      if (data) {\r\n        const message = data.body?.messageData?.textMessageData?.textMessage;\r\n        if (message) {\r\n          setMessages((prev) => [...prev, { text: message, isMy: false }]);\r\n        }\r\n      }\r\n    };\r\n\r\n    const interval = setInterval(fetchMessages, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Отправка сообщения\r\n  const handleSend = async () => {\r\n    if (!newMessage) {\r\n      alert('Введите сообщение!');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await sendMessage(phoneNumber, newMessage);\r\n      setMessages((prev) => [...prev, { text: newMessage, isMy: true }]);\r\n      setNewMessage('');\r\n    } catch (error) {\r\n      console.error('Ошибка отправки:', error);\r\n      alert('Не удалось отправить сообщение. Проверьте данные и попробуйте снова.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      <Typography variant=\"h6\" align=\"center\">\r\n        Чат с {phoneNumber}\r\n      </Typography>\r\n      <List>\r\n        {messages.map((msg, index) => (\r\n          <Message key={index} text={msg.text} isMy={msg.isMy} />\r\n        ))}\r\n      </List>\r\n      <div>\r\n        <TextField\r\n          label=\"Сообщение\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          fullWidth\r\n          margin=\"normal\"\r\n          placeholder=\"Введите сообщение\"\r\n        />\r\n        <Button onClick={handleSend} variant=\"contained\" color=\"primary\" fullWidth>\r\n          Отправить\r\n        </Button>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}